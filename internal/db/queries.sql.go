// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jehaby/lostdogs/internal/types"
)

const upsertPost = `-- name: UpsertPost :exec
INSERT INTO posts (
  owner_id,
  post_id,
  date,
  text,
  raw,
  type,
  animal,
  species,
  breed,
  sex,
  age,
  name,
  location,
  "when",
  phones,
  contact_names,
  vk_accounts,
  status_details,
  extras_sterilized,
  extras_vaccinated,
  extras_chipped,
  extras_litter_ok
)
VALUES (
  ?1,
  ?2,
  ?3,
  ?4,
  ?5,
  ?6,
  ?7,
  ?8,
  ?9,
  ?10,
  ?11,
  ?12,
  ?13,
  ?14,
  ?15,
  ?16,
  ?17,
  ?18,
  ?19,
  ?20,
  ?21,
  ?22
)
ON CONFLICT(owner_id, post_id) DO UPDATE SET
  date = excluded.date,
  text = excluded.text,
  raw = excluded.raw,
  type = excluded.type,
  animal = excluded.animal,
  species = excluded.species,
  breed = excluded.breed,
  sex = excluded.sex,
  age = excluded.age,
  name = excluded.name,
  location = excluded.location,
  "when" = excluded."when",
  phones = excluded.phones,
  contact_names = excluded.contact_names,
  vk_accounts = excluded.vk_accounts,
  status_details = excluded.status_details,
  extras_sterilized = excluded.extras_sterilized,
  extras_vaccinated = excluded.extras_vaccinated,
  extras_chipped = excluded.extras_chipped,
  extras_litter_ok = excluded.extras_litter_ok
`

type UpsertPostParams struct {
	OwnerID          int64             `json:"owner_id"`
	PostID           int64             `json:"post_id"`
	Date             int64             `json:"date"`
	Text             string            `json:"text"`
	Raw              string            `json:"raw"`
	Type             string            `json:"type"`
	Animal           string            `json:"animal"`
	Species          string            `json:"species"`
	Breed            *string           `json:"breed"`
	Sex              string            `json:"sex"`
	Age              *string           `json:"age"`
	Name             *string           `json:"name"`
	Location         *string           `json:"location"`
	When             *string           `json:"when"`
	Phones           types.StringSlice `json:"phones"`
	ContactNames     types.StringSlice `json:"contact_names"`
	VkAccounts       types.StringSlice `json:"vk_accounts"`
	StatusDetails    *string           `json:"status_details"`
	ExtrasSterilized *int64            `json:"extras_sterilized"`
	ExtrasVaccinated *int64            `json:"extras_vaccinated"`
	ExtrasChipped    *int64            `json:"extras_chipped"`
	ExtrasLitterOk   *int64            `json:"extras_litter_ok"`
}

// Insert or update a post with all parsed fields
func (q *Queries) UpsertPost(ctx context.Context, arg UpsertPostParams) error {
	_, err := q.db.ExecContext(ctx, upsertPost,
		arg.OwnerID,
		arg.PostID,
		arg.Date,
		arg.Text,
		arg.Raw,
		arg.Type,
		arg.Animal,
		arg.Species,
		arg.Breed,
		arg.Sex,
		arg.Age,
		arg.Name,
		arg.Location,
		arg.When,
		arg.Phones,
		arg.ContactNames,
		arg.VkAccounts,
		arg.StatusDetails,
		arg.ExtrasSterilized,
		arg.ExtrasVaccinated,
		arg.ExtrasChipped,
		arg.ExtrasLitterOk,
	)
	return err
}
