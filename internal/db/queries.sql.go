// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jehaby/lostdogs/internal/types"
)

const existsPost = `-- name: ExistsPost :one
SELECT EXISTS(
  SELECT 1 FROM posts WHERE owner_id = ?1 AND post_id = ?2
)
`

type ExistsPostParams struct {
	OwnerID int64 `json:"owner_id"`
	PostID  int64 `json:"post_id"`
}

func (q *Queries) ExistsPost(ctx context.Context, arg ExistsPostParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, existsPost, arg.OwnerID, arg.PostID)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const upsertPost = `-- name: UpsertPost :exec
INSERT INTO posts (
  owner_id,
  post_id,
  date,
  text,
  raw,
  type,
  animal,
  sex,
  name,
  location,
  "when",
  phones,
  contact_names,
  vk_accounts,
  photos,
  status_details
)
VALUES (
  ?1,
  ?2,
  ?3,
  ?4,
  ?5,
  ?6,
  ?7,
  ?8,
  ?9,
  ?10,
  ?11,
  ?12,
  ?13,
  ?14,
  ?15,
  ?16
)
ON CONFLICT(owner_id, post_id) DO UPDATE SET
  date = excluded.date,
  text = excluded.text,
  raw = excluded.raw,
  type = excluded.type,
  animal = excluded.animal,
  sex = excluded.sex,
  name = excluded.name,
  location = excluded.location,
  "when" = excluded."when",
  phones = excluded.phones,
  contact_names = excluded.contact_names,
  vk_accounts = excluded.vk_accounts,
  photos = excluded.photos,
  status_details = excluded.status_details
`

type UpsertPostParams struct {
	OwnerID       int64             `json:"owner_id"`
	PostID        int64             `json:"post_id"`
	Date          int64             `json:"date"`
	Text          string            `json:"text"`
	Raw           string            `json:"raw"`
	Type          string            `json:"type"`
	Animal        string            `json:"animal"`
	Sex           string            `json:"sex"`
	Name          *string           `json:"name"`
	Location      *string           `json:"location"`
	When          *string           `json:"when"`
	Phones        types.StringSlice `json:"phones"`
	ContactNames  types.StringSlice `json:"contact_names"`
	VkAccounts    types.StringSlice `json:"vk_accounts"`
	Photos        types.StringSlice `json:"photos"`
	StatusDetails *string           `json:"status_details"`
}

// Insert or update a post with all parsed fields
func (q *Queries) UpsertPost(ctx context.Context, arg UpsertPostParams) error {
	_, err := q.db.ExecContext(ctx, upsertPost,
		arg.OwnerID,
		arg.PostID,
		arg.Date,
		arg.Text,
		arg.Raw,
		arg.Type,
		arg.Animal,
		arg.Sex,
		arg.Name,
		arg.Location,
		arg.When,
		arg.Phones,
		arg.ContactNames,
		arg.VkAccounts,
		arg.Photos,
		arg.StatusDetails,
	)
	return err
}
