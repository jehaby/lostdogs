package main

import (
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

type wantCase struct {
	Type             PostType
	Animal           AnimalType
	BreedContains    string
	Phones           []string
	ContactNamesHas  []string
	LocationContains []string
	WhenContains     []string
	AgeContains      string
	ExtrasSterilized bool
	ExtrasVaccinated bool
	ExtrasLitterOK   bool
}

func TestParse(t *testing.T) {
	cases := []struct {
		name string
		text string
		want wantCase
	}{
		{
			name: "Lost cat with address and phone",
			text: "–ü—Ä–æ–ø–∞–ª–∞ –∫–æ—à–∫–∞! –°—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å. –ü—É—à–∫–∏–Ω—Å–∫–∞—è —É–ª–∏—Ü–∞, 283, –ò–∂–µ–≤—Å–∫. –¢–µ–ª–µ—Ñ–æ–Ω: 79120281683. –ò–º—è —Ö–æ–∑—è–∏–Ω–∞: –Æ—Ä–∏–π. –ö–æ—à–∫–∞ –ú–∞—Å—è",
			want: wantCase{
				Type:             TypeLost,
				Animal:           AnimalCat,
				Phones:           []string{"+79120281683"},
				LocationContains: []string{"–ü—É—à–∫–∏–Ω—Å–∫–∞—è —É–ª–∏—Ü–∞", "283"},
				ContactNamesHas:  []string{"–Æ—Ä–∏–π"},
			},
		},
		{
			name: "Sighting dog no phone",
			text: "–ë–µ–≥–∞–µ—Ç –Ω–∞ –ó–∞–∫–∏—Ä–æ–≤–∞ –∏ –ü–µ—Ä–≤–æ–º–∞–π—Å–∫–æ–π –∫–æ–±–µ–ª–µ–∫, –ø–æ—Ö–æ–∂ –Ω–∞ –ô–æ—Ä–∫–∞, –ø–æ–π–º–∞—Ç—å –Ω–µ —Å–º–æ–≥–ª–∏",
			want: wantCase{
				Type:             TypeSighting,
				Animal:           AnimalDog,
				BreedContains:    "–π–æ—Ä–∫",
				LocationContains: []string{"–ó–∞–∫–∏—Ä–æ–≤–∞", "–ü–µ—Ä–≤–æ–º–∞–π—Å–∫"},
			},
		},
		{
			name: "Found cat with phone and name",
			text: "–ù–∞–π–¥–µ–Ω –∫–æ—Ç. –†–∞–π–æ–Ω –ó–∞—Ä–µ—á–Ω–æ–µ —à–æ—Å—Å–µ 49. 89127500184 –ê–ª–µ–∫—Å–∞–Ω–¥—Ä",
			want: wantCase{
				Type:             TypeFound,
				Animal:           AnimalCat,
				Phones:           []string{"+79127500184"},
				ContactNamesHas:  []string{"–ê–ª–µ–∫—Å–∞–Ω–¥—Ä"},
				LocationContains: []string{"–ó–∞—Ä–µ—á–Ω–æ–µ —à–æ—Å—Å–µ", "49"},
			},
		},
		{
			name: "Adoption sterilized vaccinated",
			text: "–ö—Ä–∞—Å–∏–≤–∞—è –∫–æ—à–µ—á–∫–∞, —Å—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–∞, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –õ–æ—Ç–æ–∫ –Ω–∞ –æ—Ç–ª–∏—á–Ω–æ. 8-912-762-92-39 –û–ª—å–≥–∞",
			want: wantCase{
				Type:             TypeAdoption,
				Animal:           AnimalCat,
				ExtrasSterilized: true,
				ExtrasLitterOK:   true,
				Phones:           []string{"+79127629239"},
				ContactNamesHas:  []string{"–û–ª—å–≥–∞"},
			},
		},
		{
			name: "Fundraising",
			text: "–ü–æ–º–æ—á—å –æ–ø–ª–∞—Ç–∏—Ç—å –ø–µ—Ä–µ–¥–µ—Ä–∂–∫—É. –°—É–º–º–∞ –∫ —Å–±–æ—Ä—É. üìû 8912 4586329 –ê–Ω–Ω–∞",
			want: wantCase{
				Type:            TypeFundraising,
				Phones:          []string{"+79124586329"},
				ContactNamesHas: []string{"–ê–Ω–Ω–∞"},
			},
		},
		{
			name: "Lost with date time",
			text: "–ü–æ—Ç–µ—Ä—è–ª–∞—Å—å –∫–æ—à–∫–∞. –í–æ—Ç–∫–∏–Ω—Å–∫–æ–µ —à–æ—Å—Å–µ 39 26.08.2025 –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ 22:00. 89120216801",
			want: wantCase{
				Type:             TypeLost,
				WhenContains:     []string{"26.08.2025"},
				LocationContains: []string{"–í–æ—Ç–∫–∏–Ω—Å–∫–æ–µ —à–æ—Å—Å–µ", "39"},
				Phones:           []string{"+79120216801"},
			},
		},
		{
			name: "Adoption kitten 2 months",
			text: "–ú–∞–ª—ã—à—É –æ–∫–æ–ª–æ 2—Ö –º–µ—Å—è—Ü–µ–≤, –ª–æ—Ç–∫–æ–º –ø–æ–ª—å–∑—É–µ—Ç—Å—è, –ø–∏—à–∏—Ç–µ –Æ–ª–∏–∏ 89501684430",
			want: wantCase{
				Type:        TypeAdoption,
				AgeContains: "2",
				Phones:      []string{"+79501684430"},
			},
		},
		{
			name: "Link only",
			text: "https://vk.com/wall107929440_36",
			want: wantCase{Type: TypeLink},
		},
		{
			name: "Empty",
			text: "",
			want: wantCase{Type: TypeEmpty},
		},
		{
			name: "Lost multiple areas with name",
			text: "–ú—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –∫–æ—Ç–∞. –†–∞–π–æ–Ω—ã –õ—é–∫—à—É–¥—å—è –∏ –®–∞–±–µ—Ä–¥–∏–Ω–æ. 8 922 405 26 12 - –¢–∞—Ç—å—è–Ω–∞",
			want: wantCase{
				Type:             TypeLost,
				Phones:           []string{"+79224052612"},
				ContactNamesHas:  []string{"–¢–∞—Ç—å—è–Ω–∞"},
				LocationContains: []string{"–õ—é–∫—à—É–¥—å—è", "–®–∞–±–µ—Ä–¥–∏–Ω–æ"},
			},
		},
		{
			name: "Adoption extras",
			text: "—Å—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–∞, –≤–∞–∫—Ü–∏–Ω–∏—Ä–æ–≤–∞–Ω–∞. –õ–æ—Ç–æ–∫ –Ω–∞ –æ—Ç–ª–∏—á–Ω–æ",
			want: wantCase{
				Type:             TypeAdoption,
				ExtrasSterilized: true,
				ExtrasVaccinated: true,
				ExtrasLitterOK:   true,
			},
		},
		{
			name: "Adoption duplicate content style",
			text: "–ö–æ—à–µ—á–∫–∞ –∏—â–µ—Ç –¥–æ–º, –ª–∞—Å–∫–æ–≤–∞—è, 8 906 816 84 18",
			want: wantCase{
				Type:   TypeAdoption,
				Animal: AnimalCat,
				Phones: []string{"+79068168418"},
			},
		},
	}

	for _, tc := range cases {
		t.Run(tc.name, func(t *testing.T) {
			got := Parse(0, tc.text)

			require.Equal(t, tc.want.Type, got.Type, "Type")

			if tc.want.Animal != "" {
				assert.Equal(t, tc.want.Animal, got.Animal, "Animal")
			}
			if tc.want.BreedContains != "" {
				assert.Contains(t, strings.ToLower(got.Breed), tc.want.BreedContains, "BreedContains")
			}
			if tc.want.AgeContains != "" {
				assert.Contains(t, got.Age, tc.want.AgeContains, "AgeContains")
			}
			if tc.want.Phones != nil {
				assert.Equal(t, tc.want.Phones, got.Phones, "Phones")
			}
			if len(tc.want.LocationContains) > 0 {
				assert.Truef(t, containsAll(got.Location, tc.want.LocationContains), "Location: %q missing %v", got.Location, tc.want.LocationContains)
			}
			if len(tc.want.WhenContains) > 0 {
				assert.Truef(t, containsAll(got.When, tc.want.WhenContains), "When: %q missing %v", got.When, tc.want.WhenContains)
			}
			if len(tc.want.ContactNamesHas) > 0 {
				assert.Truef(t, sliceHasAll(got.ContactNames, tc.want.ContactNamesHas), "ContactNames: %v missing %v", got.ContactNames, tc.want.ContactNamesHas)
			}
			if tc.want.ExtrasSterilized {
				assert.True(t, got.Extras.Sterilized, "Extras.Sterilized")
			}
			if tc.want.ExtrasVaccinated {
				assert.True(t, got.Extras.Vaccinated, "Extras.Vaccinated")
			}
			if tc.want.ExtrasLitterOK {
				assert.True(t, got.Extras.LitterOK, "Extras.LitterOK")
			}
		})
	}
}

// --- helpers ---

func containsAll(hay string, needles []string) bool {
	for _, n := range needles {
		if !strings.Contains(hay, n) {
			return false
		}
	}
	return true
}

func sliceHasAll(hay []string, needles []string) bool {
	set := map[string]bool{}
	for _, v := range hay {
		set[v] = true
	}
	for _, n := range needles {
		if !set[n] {
			return false
		}
	}
	return true
}

func TestExtractPhones(t *testing.T) {
	cases := []struct {
		name string
		text string
		want []string
	}{
		{name: "+7 spaced/dashed", text: "–°–≤—è–∑—å: +7 (912) 028-16-83", want: []string{"+79120281683"}},
		{name: "8 with dashes", text: "–¢–µ–ª: 8-912-762-92-39", want: []string{"+79127629239"}},
		{name: "8 with spaces", text: "üìû 8912 4586329 –ê–Ω–Ω–∞", want: []string{"+79124586329"}},
		{name: "bare 11 starting 7", text: "–¢–µ–ª–µ—Ñ–æ–Ω: 79120216801", want: []string{"+79120216801"}},
		{name: "mobile 10 starting 9", text: "–ó–≤–æ–Ω–∏—Ç–µ 922 405 26 12", want: []string{"+79224052612"}},
		{name: "normalize from 8950...", text: "–ø–∏—à–∏—Ç–µ –Æ–ª–∏–∏ 89501684430", want: []string{"+79501684430"}},
		{name: "multiple + order + dedupe", text: "–¢–µ–ª: 8 (912) 028-16-83, +7 912 028 16 83, 922 405 26 12", want: []string{"+79120281683", "+79224052612"}},
	}

	for _, tc := range cases {
		t.Run(tc.name, func(t *testing.T) {
			got := extractPhones(tc.text)
			require.Equal(t, tc.want, got)
		})
	}
}

func TestDetectAnimal(t *testing.T) {
	cases := []struct {
		name string
		text string
		want AnimalType
	}{
		{name: "Cat: –∫–æ—à–∫–∞", text: "–ü—Ä–æ–ø–∞–ª–∞ –∫–æ—à–∫–∞ –≤–æ –¥–≤–æ—Ä–µ", want: AnimalCat},
		{name: "Cat: –∫–æ—Ç", text: "–ù–∞–π–¥–µ–Ω –∫–æ—Ç —É –ø–æ–¥—ä–µ–∑–¥–∞", want: AnimalCat},
		{name: "Cat: –∫–æ—Ç—ë–Ω–æ–∫", text: "–ü–æ—Ç–µ—Ä—è–ª—Å—è –∫–æ—Ç—ë–Ω–æ–∫, —Ä—ã–∂–∏–π", want: AnimalCat},
		{name: "Cat: –∫–æ—à–µ—á–∫–∞", text: "–ö–æ—à–µ—á–∫–∞ –∏—â–µ—Ç –¥–æ–º", want: AnimalCat},
		{name: "Cat: –±–µ–Ω–≥–∞–ª—å—Å–∫–∞—è", text: "–ë–µ–Ω–≥–∞–ª—å—Å–∫–∞—è –∫—Ä–∞—Å–∞–≤–∏—Ü–∞ –∂–¥—ë—Ç —Ö–æ–∑—è–π–∫—É", want: AnimalCat},

		{name: "Dog: —Å–æ–±–∞–∫–∞", text: "–ù–∞—à–ª–∏ —Å–æ–±–∞–∫—É –≤–æ–∑–ª–µ —à–∫–æ–ª—ã", want: AnimalDog},
		{name: "Dog: –ø—ë—Å", text: "–ü—ë—Å –±–µ–≥–∞–µ—Ç –ø–æ —Ä–∞–π–æ–Ω—É", want: AnimalDog},
		{name: "Dog: –ø–µ—Å–∏–∫", text: "–ú–∏–ª—ã–π –ø–µ—Å–∏–∫ –∏—â–µ—Ç –¥–æ–º", want: AnimalDog},
		{name: "Dog: –∫–æ–±–µ–ª–µ–∫", text: "–ö–æ–±–µ–ª–µ–∫ –π–æ—Ä–∫", want: AnimalDog},
		{name: "Dog: —â–µ–Ω–æ–∫", text: "–©–µ–Ω–æ–∫ –Ω–∞–π–¥–µ–Ω –Ω–æ—á—å—é", want: AnimalDog},

		{name: "Unknown: neutral text", text: "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å.", want: AnimalUnknown},
		{name: "Unknown: avoids –∫–æ—Ç–µ–π–∫–∞", text: "–°–ª–æ–≤–æ –∫–æ—Ç–µ–π–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å", want: AnimalUnknown},
	}

	for _, tc := range cases {
		t.Run(tc.name, func(t *testing.T) {
			got := detectAnimal(tc.text)
			require.Equal(t, tc.want, got)
		})
	}
}

func TestDetectType(t *testing.T) {
	cases := []struct {
		name string
		text string
		want PostType
	}{
		{name: "Lost: –ø—Ä–æ–ø–∞–ª–∞", text: "–ü—Ä–æ–ø–∞–ª–∞ –∫–æ—à–∫–∞, –ò–∂–µ–≤—Å–∫", want: TypeLost},
		{name: "Lost: –ø–æ—Ç–µ—Ä—è–ª—Å—è", text: "–ü–æ—Ç–µ—Ä—è–ª—Å—è –ø—ë—Å–∏–∫ –¥–≤–æ—Ä–Ω—è–≥–∞", want: TypeLost},
		{name: "Lost: —É–±–µ–∂–∞–ª", text: "–£–±–µ–∂–∞–ª –∫–æ—Ç–∏–∫ –≤—á–µ—Ä–∞", want: TypeLost},

		{name: "Found: –Ω–∞–π–¥–µ–Ω", text: "–ù–∞–π–¥–µ–Ω –∫–æ—Ç –≤–æ –¥–≤–æ—Ä–µ", want: TypeFound},
		{name: "Found: –Ω–∞—à–ª–∏", text: "–ù–∞—à–ª–∏ —Å–æ–±–∞–∫—É —É –º–∞–≥–∞–∑–∏–Ω–∞", want: TypeFound},
		{name: "Found: –ø–æ–¥–æ–±—Ä–∞–ª–∏", text: "–ü–æ–¥–æ–±—Ä–∞–ª–∏ —â–µ–Ω–∫–∞ —É –ø–æ–¥—ä–µ–∑–¥–∞", want: TypeFound},

		{name: "Sighting: –±–µ–≥–∞–µ—Ç", text: "–ë–µ–≥–∞–µ—Ç –∫–æ–±–µ–ª–µ–∫ –≤–æ –¥–≤–æ—Ä–µ", want: TypeSighting},
		{name: "Sighting: –∑–∞–º–µ—á–µ–Ω–∞", text: "–ó–∞–º–µ—á–µ–Ω–∞ —Å–æ–±–∞–∫–∞ —É —à–∫–æ–ª—ã", want: TypeSighting},
		{name: "Sighting: –≤–∏–¥–µ–ª–∏", text: "–í–∏–¥–µ–ª–∏ –∫–æ—Ç–∞ –Ω–∞ –ª–µ—Å—Ç–Ω–∏—Ü–µ", want: TypeSighting},

		{name: "Adoption: –∏—â–µ—Ç –¥–æ–º", text: "–ö–æ—à–µ—á–∫–∞ –∏—â–µ—Ç –¥–æ–º, –ª–∞—Å–∫–æ–≤–∞—è", want: TypeAdoption},
		{name: "Adoption: –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏", text: "–û—Ç–¥–∞–µ–º –∫–æ—Ç–µ–Ω–∫–∞ –≤ –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏", want: TypeAdoption},
		{name: "Adoption: care markers only", text: "–°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–∞, –ø—Ä–∏–≤–∏—Ç–∞, –ª–æ—Ç–æ–∫ –Ω–∞ –æ—Ç–ª–∏—á–Ω–æ", want: TypeAdoption},

		{name: "Fundraising: —Å–±–æ—Ä", text: "–°–±–æ—Ä –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–µ—Ä–µ–¥–µ—Ä–∂–∫–∏", want: TypeFundraising},
		{name: "Fundraising: –ø–µ—Ä–µ–≤–æ–¥/–∫–∞—Ä—Ç–∞", text: "–ù—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –°–±–µ—Ä", want: TypeFundraising},

		{name: "Tie both words ‚Üí Found (–Ω–∞–π–¥–µ–Ω...)", text: "–ù–∞–π–¥–µ–Ω –∫–æ—Ç, –ø–æ—Ç–æ–º –ø–æ—Ç–µ—Ä—è–ª—Å—è", want: TypeFound},
		{name: "Tie both words ‚Üí Lost (–±–µ–∑ '–Ω–∞–π–¥–µ–Ω')", text: "–ù–∞—à–ª–∏ —Å–æ–±–∞–∫—É, –Ω–æ –ø—Ä–æ–ø–∞–ª–∞ –ø–æ–∑–∂–µ", want: TypeLost},

		{name: "Unknown", text: "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å.", want: TypeUnknown},

		{name: "Adoption vs Fund ‚Üí Adoption priority", text: "–ò—â–µ—Ç –¥–æ–º, –≤–æ–∑–º–æ–∂–µ–Ω —Å–±–æ—Ä –Ω–∞ –∫–æ—Ä–º", want: TypeAdoption},
		{name: "Adoption via care markers: –≤–∞–∫—Ü–∏–Ω–∏—Ä–æ–≤–∞–Ω–∞/—á–∏–ø–∏—Ä–æ–≤–∞–Ω–∞", text: "–ö–æ—à–∫–∞ –≤–∞–∫—Ü–∏–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∏ —á–∏–ø–∏—Ä–æ–≤–∞–Ω–∞", want: TypeAdoption},
	}

	for _, tc := range cases {
		t.Run(tc.name, func(t *testing.T) {
			got := detectType(tc.text)
			require.Equal(t, tc.want, got)
		})
	}
}

func sliceHasAny(hay []string, needles []string) bool {
	set := map[string]bool{}
	for _, v := range hay {
		set[v] = true
	}
	for _, n := range needles {
		if set[n] {
			return true
		}
	}
	return false
}

// Using testify for equality checks in tests; helpers above cover contains cases.
